  bombPlastic = () => {
    let plasticLoad = this.game.grid.plastic; //array with all the plastic
    var pirates = this.game.enemy.pirates; //array with all the pirates
    var player = this.game.player;
    for (let i = plasticLoad.length - 1; i >= 0; i--) {
      if (
        //check if any plastic is near by one square in 8 directions
        (plasticLoad[i].col === this.col - SQUARE_SIZE &&
          plasticLoad[i].row === this.row - SQUARE_SIZE) ||
        (plasticLoad[i].col === this.col && plasticLoad[i].row === this.row - SQUARE_SIZE) ||
        (plasticLoad[i].col === this.col + SQUARE_SIZE &&
          plasticLoad[i].row === this.row - SQUARE_SIZE) ||
        (plasticLoad[i].col === this.col - SQUARE_SIZE && plasticLoad[i].row === this.row) ||
        (plasticLoad[i].col === this.col && plasticLoad[i].row === this.row) ||
        (plasticLoad[i].col === this.col + SQUARE_SIZE && plasticLoad[i].row === this.row) ||
        (plasticLoad[i].col === this.col - SQUARE_SIZE &&
          plasticLoad[i].row === this.row + SQUARE_SIZE) ||
        (plasticLoad[i].col === this.col && plasticLoad[i].row === this.row + SQUARE_SIZE) ||
        (plasticLoad[i].col === this.col + SQUARE_SIZE &&
          plasticLoad[i].row === this.row + SQUARE_SIZE)
      ) {
        this.cleanTimeout(plasticLoad, i);
      }
    }
    for (let i = pirates.length - 1; i >= 0; i--) {
      if (
        //check if any pirate is near by one square in 8 directions
        (pirates[i].col === this.col - SQUARE_SIZE && pirates[i].row === this.row - SQUARE_SIZE) ||
        (pirates[i].col === this.col && pirates[i].row === this.row - SQUARE_SIZE) ||
        (pirates[i].col === this.col + SQUARE_SIZE && pirates[i].row === this.row - SQUARE_SIZE) ||
        (pirates[i].col === this.col - SQUARE_SIZE && pirates[i].row === this.row) ||
        (pirates[i].col === this.col && pirates[i].row === this.row) ||
        (pirates[i].col === this.col + SQUARE_SIZE && pirates[i].row === this.row) ||
        (pirates[i].col === this.col - SQUARE_SIZE && pirates[i].row === this.row + SQUARE_SIZE) ||
        (pirates[i].col === this.col && pirates[i].row === this.row + SQUARE_SIZE) ||
        (pirates[i].col === this.col + SQUARE_SIZE && pirates[i].row === this.row + SQUARE_SIZE)
      ) {
        {
          this.cleanTimeout(pirates, i);
        }
      }
      if (
        (player.col === this.col - SQUARE_SIZE && player.row === this.row - SQUARE_SIZE) ||
        (player.col === this.col && player.row === this.row - SQUARE_SIZE) ||
        (player.col === this.col + SQUARE_SIZE && player.row === this.row - SQUARE_SIZE) ||
        (player.col === this.col - SQUARE_SIZE && player.row === this.row) ||
        (player.col === this.col && player.row === this.row) ||
        (player.col === this.col + SQUARE_SIZE && player.row === this.row) ||
        (player.col === this.col - SQUARE_SIZE && player.row === this.row + SQUARE_SIZE) ||
        (player.col === this.col && player.row === this.row + SQUARE_SIZE) ||
        (player.col === this.col + SQUARE_SIZE && player.row === this.row + SQUARE_SIZE)
      ) {
        console.log(player);
      }
    }
    this.cleanTimeout();
  };
  cleanTimeout(whoDoYouWannaClean, index) {
    //this function will remove the
    //we need to define the index otherwise it will not appear in the scope of this function
    let clean = setTimeout(() => {
      if (whoDoYouWannaClean !== undefined && index !== undefined) {
        whoDoYouWannaClean.splice(index, 1);
      }
      delete this.col;
      delete this.row;
    }, this.speed);
  }
}
